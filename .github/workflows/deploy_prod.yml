# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle to AWS - Production

on:
  push:
    branches: master

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: change permission
        run: chmod +x gradlew
      - name: Configure AWS and SAM
        uses: aws-actions/setup-sam@v1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      - name: Build with Gradle and Run SonarQube analysis
        run: |
          ./gradlew build sonarqube -Dsonar.projectKey=tolunayg_sm703-devops-project -Dsonar.organization=tolunayg -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Check SonarQube analysis results
        id: check-sonarqube-results
        run: |
          # Run SonarScanner CLI to retrieve analysis results
          sonar-scanner \
            -Dsonar.projectKey=tolunayg_sm703-devops-project \
            -Dsonar.organization=tolunayg \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.verbose=true \
            -Dsonar.scanner.dumpToFile=sonarqube-report.json

          # Parse the SonarQube analysis report
          analysis_report=$(cat sonarqube-report.json)

          # Check for critical or high-severity issues in the report
          critical_issues=$(echo "$analysis_report" | jq '.issues[] | select(.severity == "CRITICAL")')
          high_severity_issues=$(echo "$analysis_report" | jq '.issues[] | select(.severity == "HIGH")')

          # Set the output variable 'analysis-status' to 'failed' if any critical or high-severity issues are found
          if [ -n "$critical_issues" ] || [ -n "$high_severity_issues" ]; then
            echo "::set-output name=analysis-status::failed"
          else
            echo "::set-output name=analysis-status::passed"
          fi

      - name: Deploy with SAM
        run:  sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --config-file samconfig-prod.toml